{"version":3,"sources":["OptionsList.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["OptionsList","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","props","options","map","option","i","react_default","a","createElement","type","name","number","id","alt","answerIndex","htmlFor","React","Component","questions","question","answerOptions","App","call","state","correctAnswers","wrongAnswers","allAttempted","validate","bind","assertThisInitialized","createBarChart","clear","resetScore","checkAnswers","e","preventDefault","promise","Promise","resolve","reject","inputGroup","document","getElementsByClassName","index","length","questionElement","inputElements","getElementsByTagName","j","selected","checked","pTag","className","that","then","console","log","setState","destroy","ctx","getElementById","getContext","myChart","Chart","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","responsive","scales","yAxes","ticks","beginAtZero","xAxes","barPercentage","barThickness","maxBarThickness","minBarLength","gridLines","offsetGridLines","array","inputElement","substr","questionsList","OptionsList_OptionsList","onClick","width","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e93904d7.chunk.js","sourcesContent":["import React from 'react';\n\nexport class OptionsList extends React.Component {\n    \n    render() {\n        const optionsList = this.props.options.map((option, i) =>\n            <div key={i}>\n                <input \n                    type=\"radio\" \n                    name={'input-' + this.props.number} \n                    id={'input-' + this.props.number + i} \n                    value = {option}\n                    alt = {'' + this.props.number + this.props.answerIndex}\n                    // onChange = {this.props.onChange}\n                    />\n                <label\n                    htmlFor={'input-' + this.props.number + i}>\n                    {option}\n                </label>\n                <br/>\n            </div>\n        );\n        return (\n            optionsList\n        );\n    }\n}","var questions = [\n    {    \n        question: \"When did India become independent?\",\n        answerOptions: [1939, 1919, 1857, 1947],\n        answerIndex: 3\n    },\n    {    \n        question: \"Who was India's first Prime Minister?\",\n        answerOptions: [\"Jawaharlal Nehru\", \"Sardar Vallabhai Patel\", \"Bhagat Singh\", \"Indira Gandhi\"],\n        answerIndex: 0\n    },\n    {\n        question: \"What was the name of Subhash Chandra Bose's army?\",\n        answerOptions: [\"Freedom Front\", \"Azaad Hind Fauj\", \"Allies Army\", \"Anti-Allies Army\"],\n        answerIndex: 1\n    },\n    {\n        question: \"When was sepoy's mutiny?\",\n        answerOptions: [1939, 1919, 1857, 1947],\n        answerIndex: 2\n    }\n];\n\nexport default questions;\n","import React from 'react';\n//  import logo from './logo.svg';\nimport './App.css';\nimport { OptionsList } from './OptionsList';\nimport questions from './Data';\nimport Chart from 'chart.js';\n\nexport class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      correctAnswers: 0, \n      wrongAnswers: 0, \n      allAttempted: false \n    }\n    this.validate = this.validate.bind(this);\n    this.createBarChart = this.createBarChart.bind(this);\n    this.clear = this.clear.bind(this);\n    this.resetScore = this.resetScore.bind(this);\n    this.checkAnswers = this.checkAnswers.bind(this);\n  }\n\n  validate(e) {\n    e.preventDefault();\n    var promise = new Promise(function(resolve,reject) {\n      var inputGroup = document.getElementsByClassName('input-group');\n      \n      for (let index = 0; index < inputGroup.length; index++) {\n        // questionElement is the group of inputs under className 'input-group'\n        const questionElement = inputGroup[index];\n        var inputElements = questionElement.getElementsByTagName('input');\n        \n        // checking for checked inputs\n        var j=0;\n        var selected = false;\n        do {\n          if (inputElements[j].checked === true) {\n            selected = true;\n          }\n          j++;\n        } while (j < inputElements.length);\n        \n        // if no input is selected show question in red-ish color\n        var allAttempted = false;\n        var pTag = questionElement.getElementsByTagName('p')[0];\n        if (selected === false) {\n          if (pTag.className === '') {\n            pTag.className = 'alert';\n          }\n          allAttempted = false;\n        }\n        else {\n          pTag.className = '';\n          allAttempted = true;\n        }\n\n      }\n\n      resolve(allAttempted)\n      // update state of allAttempted to false or true\n      // this.setState({allAttempted: allAttempted });\n    })\n\n    var that = this;\n\n    promise.then(function(value){ \n      console.log('allAttempted: ', value);\n      that.setState({allAttempted: value });\n\n      if (that.state.allAttempted === true) {\n        that.checkAnswers();\n      }\n    });\n  }\n\n  createBarChart( correctAnswers, wrongAnswers, destroy) {\n    console.log(wrongAnswers, correctAnswers);\n    var ctx = document.getElementById('myChart').getContext('2d');\n    var myChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: ['Wrong answers', 'Correct answers'],\n            datasets: [{\n                label: 'Result',\n                data: [wrongAnswers, correctAnswers],\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)'\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                ],\n                borderWidth: 1\n            }]\n        },\n        options: {\n            responsive: true,\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }],\n                xAxes: [{\n                  barPercentage: 0.5,\n                  barThickness: 100,\n                  maxBarThickness: 200,\n                  minBarLength: 2,\n                  gridLines: {\n                      offsetGridLines: true\n                  }\n              }]\n            }\n        }\n    });\n\n    if (destroy) {\n      myChart.destroy();\n    }\n  }\n\n  resetScore() {\n    this.setState({correctAnswers: 0, wrongAnswers: 0});\n  }\n\n  checkAnswers() {\n    this.resetScore();\n    var array = document.getElementsByTagName('input');\n    for (let index = 0; index < array.length; index++) {\n      const inputElement = array[index];\n      if (inputElement.checked) {\n        // inputNumber is the id of inputElement that is checked\n        // inputAlt is the id of the correct inputElement\n        var inputNumber = inputElement.id.substr(inputElement.id.length - 2, 2);\n        var inputAlt = inputElement.alt;\n        // if both are same, answer is correct\n        if (inputNumber === inputAlt) {\n          this.setState({correctAnswers : this.state.correctAnswers + 1})\n          console.log('correct answer');\n        }\n        // else answer is wrong\n        else {\n          this.setState({wrongAnswers : this.state.wrongAnswers + 1})\n          console.log('wrong answer');\n        }\n      }\n    }\n    this.createBarChart(this.state.correctAnswers, this.state.wrongAnswers, false);\n  }\n\n  clear(e) {\n    e.preventDefault();\n    this.resetScore();\n    var inputElements = document.getElementsByTagName('input');\n    for (let index = 0; index < inputElements.length; index++) {\n      const element = inputElements[index];\n      element.checked = false;\n    }\n    this.createBarChart(this.state.correctAnswers, this.state.wrongAnswers, true);\n  }\n  \n  render() {\n    var questionsList = questions.map((question, i) =>\n      <div key={i} className=\"input-group\">\n        <p>{i+1}. {question.question}</p>\n        <OptionsList\n          number={i + 1} \n          answerIndex={question.answerIndex} \n          options={question.answerOptions}\n          // onChange={this.checkAnswers}\n          />\n      </div>\n    );\n    return (\n      <div className=\"App\">\n        <div className=\"col-1\">\n          <form>\n            {questionsList}\n            <button onClick={this.validate} type=\"submit\">Submit</button>\n            <button onClick={this.clear}>Clear</button>\n          </form>\n        </div>\n        <div className=\"col-2\">\n          <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}